name: Deploy Backend to DigitalOcean

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'docker/backend.Dockerfile'
      - '.github/workflows/deploy-backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'docker/backend.Dockerfile'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, zip, bcmath
        coverage: xdebug
    
    - name: Copy .env
      run: cp backend/.env-example backend/.env
    
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      working-directory: ./backend
    
    - name: Generate key
      run: php artisan key:generate
      working-directory: ./backend
    
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      working-directory: ./backend
    
    - name: Create Database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS test_db;"
    
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: test_db
        DB_USERNAME: root
        DB_PASSWORD: password
      run: vendor/bin/phpunit
      working-directory: ./backend

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -f docker/backend.Dockerfile -t liftnote-backend:${{ github.sha }} .
        docker tag liftnote-backend:${{ github.sha }} liftnote-backend:latest
    
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT }}
        script: |
          # Navigate to project directory
          cd /var/www/liftnote
          
          # Pull latest changes
          git pull origin main
          
          # Stop existing containers
          docker-compose -f docker-compose.prod.yml down
          
          # Remove old images
          docker system prune -f
          
          # Build and start new containers
          docker-compose -f docker-compose.prod.yml up -d --build
          
          # Run database migrations
          docker-compose -f docker-compose.prod.yml exec -T backend php artisan migrate --force
          
          # Clear and cache config
          docker-compose -f docker-compose.prod.yml exec -T backend php artisan config:cache
          docker-compose -f docker-compose.prod.yml exec -T backend php artisan route:cache
          docker-compose -f docker-compose.prod.yml exec -T backend php artisan view:cache
          
          # Set proper permissions
          docker-compose -f docker-compose.prod.yml exec -T backend chown -R www-data:www-data /var/www/html/storage
          docker-compose -f docker-compose.prod.yml exec -T backend chown -R www-data:www-data /var/www/html/bootstrap/cache
          
          # Restart nginx
          sudo systemctl restart nginx
          
          echo "Deployment completed successfully!" 